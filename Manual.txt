MIDAS 1.1

Copyright 
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
This software is distributed under the MIT license.

Environment Requirement
Running Python scripts requires Python 2.7.2 or above, and RDKit 2013_06_1 or above.
Command
python MIDAS.py -f FT2_File_Name (required) -c Configure_File_Name (required) -o Results_File_Name (optional) -a Annotation_File_Name (optional) 
If -o is not specified, the output result file will be put in the same directory of the FT2 file. Similarly, if -a is not specified, the annotation file will be put in the same directory of the FT2 file. Here are two command examples.
python MIDAS.py -f test/myMS2data.FT2  -c Configure.cfg -o output/myout.txt -a output/myana.txt
python MIDAS.py -f test/myft2.FT2  -c Configure.cfg
The second command will generate output files "myMS2data.meb" and "myMS2data.AFT2" in the directory "test".
Configure File
This is a configure file example, in which users may want to update "Metabolite_Database", whose value is the name of a file containing compound candidates. This example can also be downloaded from the following link, https://sites.google.com/site/ywang802/Config.cfg. 
##################################################
##### Parameters for Metabolite identification ###
##################################################
[Metabolite_Identification]

# Filename of the metabolite database
Metabolite_Database = test/MetaCyc_stable.mdb
		
# Presumed polarity if not provided in the input file. Options: "positive" and "negative"
Default_Polarity = positive

# Presumed charge state for unknown charge state
Default_Charge_State = 1

##### Mass_Accuracy #####

# Mass Windows to be open around parent ion. -->
# Examples: a center window: "0", a center window and an offset window: "-1,0", etc -->
Parent_Mass_Windows = 0

Positive_Ion_Fragment_Mass_Windows = 0, 1, 2
Negative_Ion_Fragment_Mass_Windows = -2, -1, 0

# Parent mass tolerance in Da
Mass_Tolerance_Parent_Ion = 0.01

# Fragment mass tolerance in Da
Mass_Tolerance_Fragment_Ions = 0.01

# Break ring structures in a metabolite or not: "true" or "false"
Break_rings = true

# Depth of fragmentation pathways. The valid range is from 1 to 5
Fragmentation_Depth = 3	

# Number of processes the search should initiate. This should be less than the total number of CPU cores.
Number_of_Processes = 35	

###############################################################################


Database File
There are four columns in a database file, which are "Identifier",	"Name"	, "InChI", and "Links". Column names are given in the first line. Except the first line, each line represents a compound. The latest version of MIDAS uses information of "Identifier",	"Name"	, and "InChI". A database example of MetaCyc 17.0 is available at https://sites.google.com/site/ywang802/MetaCyc_stable.mdb .

###############################################################################

Filtering 

Filtering picks promising predictions based on search results generated by MIDAS.

The command format is

python filtering.py -w workingdirectory -o output_file_name. -s score_threshold -p spectra_count_threshold -e explain_peaks_threshold -d deltaZ_threshold 

All AFT2 files for filtering are put in workingdirectory, which is specified by -w. The output file follows AFT2 file format, and its path can be specified by -o. The samllest acceptable score is specified by -s. The least acceptable number of spectra picking the same compound is specified by -p. The least acceptable number of peaks explained by the compound is specified by -e. The deltaZ threshold is specified by -d


